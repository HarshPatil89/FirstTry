import tkinter as tk
from tkinter import ttk

class DynamicDropdownApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Dynamic Dropdown Application")
        
        # Mock data structure (replace with real data source)
        self.data = {
            'Category': ['Electronics', 'Books', 'Clothing'],
            'Electronics': ['Mobile', 'Laptop', 'Tablet'],
            'Books': ['Fiction', 'Non-Fiction', 'Academic'],
            'Clothing': ['Men', 'Women', 'Kids'],
            'Mobile': ['Apple', 'Samsung', 'Google'],
            'Laptop': ['Dell', 'HP', 'Lenovo'],
            'Tablet': ['iPad', 'Samsung', 'Amazon'],
            'Fiction': ['Mystery', 'Romance', 'Sci-Fi'],
            # Add more data as needed
        }
        
        # Store rows and their variables
        self.rows = []
        
        # Create header
        self.header = ttk.Label(root, text="Dynamic Dropdown Form", font=('Helvetica', 14, 'bold'))
        self.header.pack(pady=10)
        
        # Add button
        self.add_btn = ttk.Button(root, text="Add Row", command=self.add_row)
        self.add_btn.pack(pady=5)
        
        # Submit button
        self.submit_btn = ttk.Button(root, text="Submit", command=self.submit_data)
        self.submit_btn.pack(pady=10)
        
        # Add initial row
        self.add_row()
    
    def add_row(self):
        row_frame = ttk.Frame(self.root)
        row_frame.pack(pady=5, anchor='w')
        
        # Store variables for each dropdown
        vars = [tk.StringVar() for _ in range(3)]
        dropdowns = []
        
        # Create dropdowns
        for i in range(3):
            cb = ttk.Combobox(row_frame, textvariable=vars[i], state='readonly')
            cb.grid(row=0, column=i, padx=5)
            dropdowns.append(cb)
            
            # Bind dropdown changes
            if i < 2:
                vars[i].trace_add('write', 
                    lambda *_, idx=i, row=len(self.rows): self.update_dropdown(idx+1, row))
        
        # Initialize first dropdown
        dropdowns[0]['values'] = self.data['Category']
        dropdowns[0].current(0)
        
        # Store row components
        self.rows.append({
            'frame': row_frame,
            'vars': vars,
            'dropdowns': dropdowns
        })
    
    def update_dropdown(self, dropdown_index, row_index):
        row = self.rows[row_index]
        previous_value = row['vars'][dropdown_index-1].get()
        
        # Clear subsequent dropdowns
        for i in range(dropdown_index, 3):
            row['vars'][i].set('')
            row['dropdowns'][i]['values'] = []
        
        # Get new values from mock data
        if previous_value in self.data:
            new_values = self.data[previous_value]
            row['dropdowns'][dropdown_index]['values'] = new_values
            if new_values:
                row['dropdowns'][dropdown_index].current(0)
    
    def submit_data(self):
        results = []
        for idx, row in enumerate(self.rows):
            values = [var.get() for var in row['vars']]
            if all(values):  # Check if all dropdowns have selections
                results.append({
                    'row': idx+1,
                    'selections': values
                })
        
        # Print results (replace with your submission logic)
        print("Submitted Data:")
        for result in results:
            print(f"Row {result['row']}: {result['selections']}")
        print("\n")

if __name__ == "__main__":
    root = tk.Tk()
    app = DynamicDropdownApp(root)
    root.mainloop()
