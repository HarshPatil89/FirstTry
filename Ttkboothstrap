import tkinter as tk
from tkinter import messagebox
from ttkbootstrap import Style, Window
from ttkbootstrap.constants import *
from ttkbootstrap.tableview import Tableview
from ttkbootstrap.validation import add_regex_validation

class AdminPanel(Window):
    def __init__(self):
        super().__init__(themename="darkly")
        self.title("Admin Panel")
        self.geometry("1200x800")
        
        # Configure grid layout
        self.grid_columnconfigure(1, weight=1)
        self.grid_rowconfigure(0, weight=1)
        
        self.create_sidebar()
        self.create_main_area()
        
        # Store current users and content
        self.users = [
            {"id": 1, "name": "Admin User", "email": "admin@example.com", "role": "Administrator"},
            {"id": 2, "name": "John Doe", "email": "john@example.com", "role": "Editor"}
        ]
        
        self.content = [
            {"id": 1, "title": "Welcome Post", "category": "General", "status": "Published"},
            {"id": 2, "title": "New Features", "category": "Updates", "status": "Draft"}
        ]

    def create_sidebar(self):
        # Sidebar
        sidebar = tk.Frame(self, width=200, bg="#2c3e50")
        sidebar.grid(row=0, column=0, sticky="ns")
        
        # Sidebar buttons
        buttons = [
            ("Dashboard", self.show_dashboard),
            ("User Management", self.show_user_management),
            ("Content Management", self.show_content_management),
            ("Settings", self.show_settings),
            ("Logout", self.logout)
        ]
        
        for text, command in buttons:
            btn = tk.Button(sidebar, text=text, command=command,
                          bg="#34495e", fg="white", relief="flat",
                          activebackground="#2c3e50", padx=20, pady=10)
            btn.pack(fill="x", padx=5, pady=2)
            
        self.sidebar = sidebar

    def create_main_area(self):
        # Main content area
        self.main_area = tk.Frame(self)
        self.main_area.grid(row=0, column=1, sticky="nsew", padx=10, pady=10)
        
        # Create all frames but don't pack them yet
        self.dashboard_frame = self.create_dashboard()
        self.user_frame = self.create_user_management()
        self.content_frame = self.create_content_management()
        self.settings_frame = self.create_settings()
        
        # Show dashboard by default
        self.show_dashboard()

    def show_frame(self, frame):
        # Hide all frames
        for child in self.main_area.winfo_children():
            child.pack_forget()
        
        # Show selected frame
        frame.pack(fill="both", expand=True)

    def create_dashboard(self):
        frame = tk.Frame(self.main_area)
        
        # Dashboard content
        tk.Label(frame, text="Dashboard", font=("Helvetica", 16, "bold")).pack(pady=10)
        
        # Stats cards
        stats_frame = tk.Frame(frame)
        stats_frame.pack(fill="x", pady=20)
        
        stats = [
            ("Total Users", len(self.users), "primary"),
            ("Active Content", len(self.content), "success"),
            ("Pending Tasks", 3, "warning"),
            ("System Health", "98%", "info")
        ]
        
        for text, value, color in stats:
            card = tk.Frame(stats_frame, relief="groove", borderwidth=1)
            card.pack(side="left", expand=True, fill="x", padx=5)
            
            tk.Label(card, text=text, font=("Helvetica", 10)).pack(pady=5)
            tk.Label(card, text=str(value), font=("Helvetica", 18, "bold"),
                    fg=color).pack(pady=5)
        
        # Recent activity
        tk.Label(frame, text="Recent Activity", font=("Helvetica", 14)).pack(pady=10)
        activity = [
            ("User login", "Admin User logged in 2 hours ago"),
            ("Content update", "New post created by John Doe"),
            ("System update", "Security patches applied")
        ]
        
        for icon, text in activity:
            tk.Label(frame, text=f"â€¢ {text}").pack(anchor="w")
        
        return frame

    def create_user_management(self):
        frame = tk.Frame(self.main_area)
        
        # Header
        header = tk.Frame(frame)
        header.pack(fill="x", pady=10)
        tk.Label(header, text="User Management", font=("Helvetica", 16, "bold")).pack(side="left")
        
        # Action buttons
        btn_frame = tk.Frame(header)
        btn_frame.pack(side="right")
        tk.Button(btn_frame, text="Add User", command=self.add_user, bootstyle=SUCCESS).pack(side="left", padx=5)
        tk.Button(btn_frame, text="Edit User", command=self.edit_user, bootstyle=INFO).pack(side="left", padx=5)
        tk.Button(btn_frame, text="Delete User", command=self.delete_user, bootstyle=DANGER).pack(side="left", padx=5)
        
        # User table
        columns = [
            {"text": "ID", "stretch": False},
            {"text": "Name"},
            {"text": "Email"},
            {"text": "Role"}
        ]
        
        self.user_table = Tableview(
            master=frame,
            coldata=columns,
            rowdata=self.users,
            paginated=True,
            searchable=True,
            bootstyle=PRIMARY
        )
        self.user_table.pack(fill="both", expand=True)
        
        return frame

    def create_content_management(self):
        frame = tk.Frame(self.main_area)
        
        tk.Label(frame, text="Content Management", font=("Helvetica", 16, "bold")).pack(pady=10)
        
        # Content table
        columns = [
            {"text": "ID", "stretch": False},
            {"text": "Title"},
            {"text": "Category"},
            {"text": "Status"}
        ]
        
        self.content_table = Tableview(
            master=frame,
            coldata=columns,
            rowdata=self.content,
            paginated=True,
            searchable=True,
            bootstyle=SUCCESS
        )
        self.content_table.pack(fill="both", expand=True)
        
        return frame

    def create_settings(self):
        frame = tk.Frame(self.main_area)
        
        tk.Label(frame, text="Settings", font=("Helvetica", 16, "bold")).pack(pady=10)
        
        # Theme selector
        tk.Label(frame, text="Application Theme").pack(pady=5)
        self.theme_var = tk.StringVar(value="darkly")
        theme_select = tk.Combobox(frame, textvariable=self.theme_var,
                                 values=Style().theme_names())
        theme_select.pack(pady=5)
        tk.Button(frame, text="Apply Theme", command=self.apply_theme,
                bootstyle=PRIMARY).pack(pady=10)
        
        # System settings
        tk.Label(frame, text="System Preferences").pack(pady=10)
        self.auto_update = tk.BooleanVar(value=True)
        tk.Checkbutton(frame, text="Automatic Updates", variable=self.auto_update).pack(anchor="w")
        
        return frame

    def show_dashboard(self):
        self.show_frame(self.dashboard_frame)

    def show_user_management(self):
        self.user_table.delete_rows()
        self.user_table.insert_rows(self.users)
        self.show_frame(self.user_frame)

    def show_content_management(self):
        self.content_table.delete_rows()
        self.content_table.insert_rows(self.content)
        self.show_frame(self.content_frame)

    def show_settings(self):
        self.show_frame(self.settings_frame)

    def add_user(self):
        self.user_dialog("Add New User")

    def edit_user(self):
        selected = self.user_table.get_selected_row()
        if not selected:
            messagebox.showwarning("No Selection", "Please select a user to edit")
            return
        self.user_dialog("Edit User", selected.values)

    def delete_user(self):
        selected = self.user_table.get_selected_row()
        if not selected:
            messagebox.showwarning("No Selection", "Please select a user to delete")
            return
        
        if messagebox.askyesno("Confirm Delete", "Are you sure you want to delete this user?"):
            self.users = [u for u in self.users if u["id"] != selected.values["id"]]
            self.show_user_management()

    def user_dialog(self, title, user=None):
        dialog = tk.Toplevel(self)
        dialog.title(title)
        
        # Form fields
        tk.Label(dialog, text="Name:").grid(row=0, column=0, padx=5, pady=5)
        name_entry = tk.Entry(dialog)
        name_entry.grid(row=0, column=1, padx=5, pady=5)
        
        tk.Label(dialog, text="Email:").grid(row=1, column=0, padx=5, pady=5)
        email_entry = tk.Entry(dialog)
        email_entry.grid(row=1, column=1, padx=5, pady=5)
        add_regex_validation(email_entry, r'^[\w\.-]+@[\w\.-]+\.\w+$')
        
        tk.Label(dialog, text="Role:").grid(row=2, column=0, padx=5, pady=5)
        role_entry = tk.Combobox(dialog, values=["Administrator", "Editor", "Viewer"])
        role_entry.grid(row=2, column=1, padx=5, pady=5)
        
        # Populate fields if editing
        if user:
            name_entry.insert(0, user["name"])
            email_entry.insert(0, user["email"])
            role_entry.set(user["role"])
        
        # Submit button
        def submit():
            new_user = {
                "id": user["id"] if user else len(self.users) + 1,
                "name": name_entry.get(),
                "email": email_entry.get(),
                "role": role_entry.get()
            }
            
            if user:
                # Update existing user
                index = next(i for i, u in enumerate(self.users) if u["id"] == user["id"])
                self.users[index] = new_user
            else:
                # Add new user
                self.users.append(new_user)
            
            self.show_user_management()
            dialog.destroy()
        
        tk.Button(dialog, text="Submit", command=submit, bootstyle=SUCCESS).grid(row=3, column=1, pady=10)

    def apply_theme(self):
        Style(theme=self.theme_var.get())
        self.sidebar.config(bg="#2c3e50")

    def logout(self):
        if messagebox.askyesno("Logout", "Are you sure you want to logout?"):
            self.destroy()

if __name__ == "__main__":
    app = AdminPanel()
    app.mainloop()
