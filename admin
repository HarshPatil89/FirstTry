import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
from datetime import datetime

class AdminConsole:
    def __init__(self, root):
        self.root = root
        self.root.title("Admin Console")
        self.root.geometry("1000x600")
        
        # Mock database
        self.users = {
            'admin': {'password': 'admin123', 'role': 'admin'},
            'user1': {'password': 'pass123', 'role': 'user'}
        }
        self.logs = []
        
        # Style configuration
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # Authentication
        self.show_login_screen()
    
    def show_login_screen(self):
        self.login_frame = ttk.Frame(self.root)
        self.login_frame.pack(pady=100)
        
        ttk.Label(self.login_frame, text="Admin Login", font=('Helvetica', 16)).grid(row=0, column=0, columnspan=2, pady=10)
        
        ttk.Label(self.login_frame, text="Username:").grid(row=1, column=0, padx=5, pady=5)
        self.username_entry = ttk.Entry(self.login_frame)
        self.username_entry.grid(row=1, column=1, padx=5, pady=5)
        
        ttk.Label(self.login_frame, text="Password:").grid(row=2, column=0, padx=5, pady=5)
        self.password_entry = ttk.Entry(self.login_frame, show="*")
        self.password_entry.grid(row=2, column=1, padx=5, pady=5)
        
        ttk.Button(self.login_frame, text="Login", command=self.authenticate).grid(row=3, column=0, columnspan=2, pady=10)
    
    def authenticate(self):
        username = self.username_entry.get()
        password = self.password_entry.get()
        
        if username in self.users and self.users[username]['password'] == password:
            if self.users[username]['role'] == 'admin':
                self.login_frame.destroy()
                self.create_main_interface()
                self.log_action(f"Admin login: {username}")
            else:
                messagebox.showerror("Access Denied", "Insufficient privileges")
        else:
            messagebox.showerror("Login Failed", "Invalid credentials")
    
    def create_main_interface(self):
        # Main container
        self.main_frame = ttk.Frame(self.root)
        self.main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Menu sidebar
        self.menu_frame = ttk.Frame(self.main_frame, width=200)
        self.menu_frame.pack(side=tk.LEFT, fill=tk.Y)
        
        menu_buttons = [
            ("User Management", self.show_user_management),
            ("System Logs", self.show_system_logs),
            ("Settings", self.show_settings),
            ("Logout", self.logout)
        ]
        
        for text, command in menu_buttons:
            ttk.Button(self.menu_frame, text=text, command=command, width=20).pack(pady=5, padx=5)
        
        # Content area
        self.content_frame = ttk.Frame(self.main_frame)
        self.content_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        self.show_user_management()
    
    def show_user_management(self):
        self.clear_content()
        
        # User list
        ttk.Label(self.content_frame, text="User Management", font=('Helvetica', 14)).pack(pady=10)
        
        self.user_listbox = tk.Listbox(self.content_frame, width=50, height=15)
        self.user_listbox.pack(pady=10)
        self.update_user_list()
        
        # Buttons
        btn_frame = ttk.Frame(self.content_frame)
        btn_frame.pack(pady=10)
        
        ttk.Button(btn_frame, text="Add User", command=self.add_user).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text="Delete User", command=self.delete_user).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text="Reset Password", command=self.reset_password).pack(side=tk.LEFT, padx=5)
    
    def show_system_logs(self):
        self.clear_content()
        
        ttk.Label(self.content_frame, text="System Logs", font=('Helvetica', 14)).pack(pady=10)
        
        self.log_text = tk.Text(self.content_frame, width=80, height=20)
        self.log_text.pack(pady=10)
        self.update_log_display()
        
        ttk.Button(self.content_frame, text="Clear Logs", command=self.clear_logs).pack()
    
    def show_settings(self):
        self.clear_content()
        
        ttk.Label(self.content_frame, text="System Settings", font=('Helvetica', 14)).pack(pady=10)
        
        settings_frame = ttk.Frame(self.content_frame)
        settings_frame.pack()
        
        # Maintenance mode toggle
        self.maintenance_var = tk.BooleanVar()
        ttk.Checkbutton(settings_frame, text="Maintenance Mode", variable=self.maintenance_var).grid(row=0, column=0, sticky='w', pady=5)
        
        # Data retention
        ttk.Label(settings_frame, text="Log Retention (days):").grid(row=1, column=0, sticky='w')
        self.retention_entry = ttk.Entry(settings_frame)
        self.retention_entry.grid(row=1, column=1, padx=5)
        
        ttk.Button(settings_frame, text="Save Settings", command=self.save_settings).grid(row=2, column=0, columnspan=2, pady=10)
    
    def clear_content(self):
        for widget in self.content_frame.winfo_children():
            widget.destroy()
    
    def update_user_list(self):
        self.user_listbox.delete(0, tk.END)
        for user in self.users:
            self.user_listbox.insert(tk.END, f"{user} ({self.users[user]['role']})")
    
    def add_user(self):
        username = simpledialog.askstring("Add User", "Enter username:")
        if username:
            if username not in self.users:
                password = simpledialog.askstring("Add User", "Enter temporary password:")
                role = simpledialog.askstring("Add User", "Enter role (admin/user):")
                self.users[username] = {'password': password, 'role': role}
                self.update_user_list()
                self.log_action(f"User added: {username}")
            else:
                messagebox.showerror("Error", "User already exists")
    
    def delete_user(self):
        selected = self.user_listbox.curselection()
        if selected:
            username = self.user_listbox.get(selected[0]).split()[0]
            if username != 'admin':
                del self.users[username]
                self.update_user_list()
                self.log_action(f"User deleted: {username}")
            else:
                messagebox.showerror("Error", "Cannot delete admin user")
    
    def reset_password(self):
        selected = self.user_listbox.curselection()
        if selected:
            username = self.user_listbox.get(selected[0]).split()[0]
            new_password = simpledialog.askstring("Reset Password", f"New password for {username}:")
            if new_password:
                self.users[username]['password'] = new_password
                self.log_action(f"Password reset for: {username}")
    
    def update_log_display(self):
        self.log_text.delete(1.0, tk.END)
        for log in self.logs[-100:]:  # Show last 100 entries
            self.log_text.insert(tk.END, log + "\n")
    
    def log_action(self, message):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.logs.append(f"[{timestamp}] {message}")
        self.update_log_display()
    
    def clear_logs(self):
        self.logs = []
        self.update_log_display()
    
    def save_settings(self):
        retention = self.retention_entry.get()
        # Add actual settings save logic here
        messagebox.showinfo("Settings Saved", "Settings updated successfully")
        self.log_action("Settings updated")
    
    def logout(self):
        self.main_frame.destroy()
        self.show_login_screen()
        self.log_action("Admin logged out")

if __name__ == "__main__":
    root = tk.Tk()
    app = AdminConsole(root)
    root.mainloop()
